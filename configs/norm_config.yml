#基準パラメータ
stdparam:
  dev:
    # ユーザー定義 使いたいときは *(&以降の文字列)と表記する
    # 例）velmaxを使いたいときは *vmax と書く
    velmax: &vmax 1010.505 #戦闘機の最高速度 3637.818km/hとする
    accelmax: &amax 36.53 #戦闘機の最高加速度 sqrt(vmax*2)m/s とする
    omegamax: &omax 40 #戦闘機の最高角速度 40deg/sとする
    pi: &pi 3.14159265359
  class:
    # 動的に値を取得する
    # 取得した値は std: 変数名 で参照できる
    # 例）R5AirToAirCombatRuler01のhLimを取り出したいときは std: hLim と表記する
    Ruler: # 実装されているクラス名
      - maxTime # 取得したい値の変数名
    R5AirToAirCombatRuler01:
      - minTime
      - dLine
      - dOut
      - hLim
      - westSider
      - eastSider
      - pDisq
      - pBreak
# ショートカット用（ファイル作成時にのみ利用するが、実際には不要かもしれない）
stdconst:
  passdouble: &dpass
    dtype: double
    norm: pass
  singlezero: &szero
    dtype: double
    norm: value
    params: 0
  timenorm: &timenorm
    dtype: double
    norm: max
    params:
      overflow: -1
      stdkey: maxTime
  posnorm: &posnorm
    dtype: vector3
    norm: max
    params:
      x:
        stdkey: dLine
      y:
        stdkey: dLine
      z:
        stdkey: hLim
  hightnorm: &hnorm
    dtype: double
    norm: max
    params:
      stdkey: hLim
  velnorm: &velnorm
    dtype: vector3
    norm: max
    params: *vmax
  svelnorm: &svelnorm
    dtype: double
    norm: max
    params: *vmax
  saccelnorm: &sanorm
    dtype: double
    norm: max
    params: *amax
  omeganorm: &omeganorm
    dtype: vector3
    norm: max
    params: *omax
  ratenorm: &ratenorm
    dtype: double
    norm: max
    params: *omax
  boolnorm: &boolnorm
    dtype: bool
    norm: mapping
    params:
      True: 1
      False: 0
# 変数型のサイズを保持
sizeparam:
  default: 1
  vector3: 3
  quaternion: 4
  bool: 1
  double: 1
  data: 0
  list: relateChildren # relateChildrenの大きさは動的に計算する
  dict: relateChildren
# [本体] クラスを正規化するためのパラメータ
# クラスごとに分けて書くと上手く動く (書く順番によってPaddingが変わるため注意！基本的にはクラスを利用するものは下の方に表記する)
class:
  Bool: *boolnorm
  MotionState: # クラス名(この名前はこのファイルから参照するときのみ利用するため自由でいい)
    pos: *posnorm
    vel: *velnorm
    omega: *omeganorm
    q: # 値があるところまでJSONの階層構造で書く
      dtype: quaternion # データのサイズ推定用
      norm: pass # 値を与えられたまま返す
    qh:
      dtype: quaternion
      norm: pass
    az:
      dtype: double
      norm: max
      params: *pi
    el:
      dtype: double
      norm: max
      params: *pi
    time: *timenorm

  Track2DS: # 処理を安定化させるため、再帰構造になっているものは終了用(再帰しない)のクラスを用意しておく
    # truth:
    #  dtype: str
    #  norm: ignore
    time: *timenorm
    dir:
      dtype: vector3
      norm: pass
    origin: *posnorm
    omega: *omeganorm
  Track3DS:
    # truth:
    #  dtype: str
    #  norm: ignore
    time: *timenorm
    pos: *posnorm
    vel: *velnorm

  Track3DList:
    dtype: list
    norm: objsnormalize # リストや辞書型をparamsの型に合わせて処理する
    padding: 2 # 要素の最小個数を明示
    ignore: # params内で指定されたclass内の項目で無視するものを指定する
      - buffer
    sort: # 処理するデータをkeyに沿って並び替える
      reverse: True
      keys:
        - time
    params:
      class: Track3DS
  Track2DList:
    dtype: list
    norm: objsnormalize
    padding: 2
    ignore:
      - buffer
    sort:
      reverse: True
      keys:
        - time
    params:
      class: Track2DS

  Track2D:
    # truth:
    #  dtype: str
    #  norm: ignore # この項目を無視する（参照しない項目は記述する必要がないので、明示したいときだけでいい）
    time: *timenorm
    dir:
      dtype: vector3
      norm: pass
    origin: *posnorm
    omega: *omeganorm
    buffer:
      class: Track2DList # このファイル内で名前が指定されたclassに処理を受け渡す
  Track3D:
    # truth:
    #  dtype: str
    #  norm: ignore
    time: *timenorm
    pos: *posnorm
    vel: *velnorm
    buffer:
      class: Track3DList

  Missile:
    isAlive: *boolnorm
    hasLaunched: *boolnorm
    launchedT: *timenorm
    mode:
      dtype: str
      norm: onehot # one-hot表現にする
      params:
        - GUIDED
        - SELF
        - MEMORY
    target:
      class: Track3D
    motion:
      class: MotionState
    
  Sensor:
    radar:
      track:
        class: Track3DList
    track:
      class: Track3DList
    # trackSource
    mws:
      track:
        class: Track2DList
  Fire:
      nullable: True
      dtype: list
      norm: objsnormalize
      params:
        - Bool
        - Track3D
  Roll:
    dtype: list
    norm: flagvaluenormalize
    params:
      "Don't care": *szero
      Angle: *dpass
      Rate: *ratenorm
  Horizontal:
    dtype: list
    norm: flagvaluenormalize
    params:
      "Don't care": *szero
      Az_NED: *dpass
      Az_BODY: *dpass
      Rate: *ratenorm
  Vertical:
    dtype: list
    norm: flagvaluenormalize
    params:
      "Don't care": *szero
      El: *dpass
      Pos: *hnorm
      Rate: *ratenorm
  Throttle:
    dtype: list
    norm: flagvaluenormalize
    params:
      "Don't care": *szero
      Vel: *svelnorm
      Accel: *sanorm
      Throttle: *dpass
  SharedDecision:
    Fire:
      class: Fire
    Roll:
      class: Roll
    Horizontal:
      class: Horizontal
    Vertical:
      class: Vertical
    Throttle:
      class: Throttle
      
  Weapon:
    remMsls:
        dtype: uint
        norm: max
        params:
          storedvalue:
            keys:
              - spec
              - weapon
              - numMsls
    # nextMsl
    launchable: *boolnorm
    missiles:
      dtype: list
      norm: objsnormalize
      padding: 4
      sort:
        reverse: True
        ignore:
          isAlive: False
        keys:
          - target
          - time
      params:
        class: Missile
      
  Spec:
    dtype: data
    norm: storedata # データをローカルで保持しておく
    params: spec

  Propulsion:
    fuelRemaining:
        dtype: double
        norm: max
        params:
          storedvalue: # ローカルで保持したデータを取り出す（階層構造でkeyを指定することで取り出すデータを絞り込める）
            keys:
              - spec
              - propulsion
              - fuelCapacity
  
  ObservationS:
    isAlive: *boolnorm
    spec:
      dtype: data
      norm: storedata
      params: spec
    motion:
      class: MotionState
    propulsion:
      class: Propulsion
    sensor:
      class: Sensor
    weapon:
      class: Weapon

  Shared:
    agent:
      dtype: dict
      norm: objsnormalize
      padding: 2
      params:
        decision:
          nullable: True
          class: SharedDecision
    fighter:
      dtype: dict
      norm: objsnormalize
      padding: 1
      filter: # 複数データを絞り込む
        has: # 以下の構造を持っているものを取り出す
          - sensor
      ignore:
        - shared
        - sensor.track
      params:
        class: ObservationS

  Observation:
    isAlive: *boolnorm
    spec:
      class: Spec
    motion:
      class: MotionState
    propulsion:
      class: Propulsion
    sensor:
      class: Sensor
    weapon:
      class: Weapon
    shared:
      class: Shared
